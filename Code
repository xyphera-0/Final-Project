
////////////////////////////////////////////////////////////////////////
//** ENGR-2350 Template Project 
//** NAME: XXXX
//** RIN: XXXX
//** This is the base project for several activities and labs throughout
//** the course.  The outline provided below isn't necessarily *required*
//** by a C program; however, this format is required within ENGR-2350
//** to ease debugging/grading by the staff.
////////////////////////////////////////////////////////////////////////

// We'll always add this include statement. This basically takes the
// code contained within the "engr_2350_msp432.h" file and adds it here.
#include "engr2350_msp432.h"


// Add function prototypes here as needed.
void GPIO_Init();
void I2CInit();
uint16_t readCompass();
uint16_t readRanger();


// Add global variables here as needed.
eUSCI_I2C_MasterConfig I2c;
uint8_t compass[2];
uint16_t compassHeading;
uint16_t compassRange;
uint8_t range[2];

int main( void ) {    /** Main Function ****/
  
    // Add local variables here as needed.

    // We always call the SysInit function first to set up the 
    // microcontroller for how we are going to use it.
    SysInit();
    GPIO_Init();
    I2CInit();

    // Place initialization code (or run-once) code here
    //I2C_writeData(EUSCI_B3_BASE, 0x51, 0, range,1);
    //__delay_cycles(2.4e6);
    printf("Activity 13 \r\n");
    while( 1 ) {  
        // Place code that runs continuously in here
//        printf("Compass: %4u\r\n",readCompass());
//        __delay_cycles(2.4e6); // Wait 1/10 of a second
        readCompass();
        readRanger();
        printf("Compass: %4u\tRanger: %4u\r\n",compassHeading,compassRange);
          __delay_cycles(2.4e6); // Wait 1/10 of a second
    }   
}    /** End Main Function ****/   

// Add function declarations here as needed
void GPIO_Init(){
    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P6, GPIO_PIN6, GPIO_SECONDARY_MODULE_FUNCTION);
    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P6, GPIO_PIN7, GPIO_SECONDARY_MODULE_FUNCTION);
}
void I2CInit(){
    I2c.selectClockSource=EUSCI_B_I2C_CLOCKSOURCE_SMCLK;
    I2c.i2cClk = 24000000;
    I2c.dataRate = EUSCI_B_I2C_SET_DATA_RATE_100KBPS;
    I2c.byteCounterThreshold=0;
    I2c.autoSTOPGeneration=EUSCI_B_I2C_NO_AUTO_STOP;
    I2C_initMaster(EUSCI_B3_BASE , &I2c);
    I2C_enableModule(EUSCI_B3_BASE);
}
uint16_t readCompass(){
//    Ensure a minimum 2-element uint8_t array exists
//    use I2C_readData to fetch registers 2 and 3 at the same time
    printf("starting to read compass data \r\n");
    I2C_readData(EUSCI_B3_BASE,0x60,2,compass,2);
//    Combine the received bytes together to form the heading value
      compassHeading = (compass[0]<<8) + (compass[1]) ;
      //printf("compassheading: %u \r\n", compassHeading);
      return compassHeading;
}
uint16_t readRanger(){
    printf("starting to read ranger data\r\n");
    I2C_readData(EUSCI_B3_BASE, 0x70, 4, range, 2);
    compassRange = (range[0]<<8) + (range[1]);
    printf("rangerheading: %u, %u \r\n", range[1],range[0]);
    uint8_t a[1]={0x51};
    I2C_writeData(EUSCI_B3_BASE, 0x70, 0, a, 1);
    return compassRange;
}


// Add interrupt functions last so they are easy to find
